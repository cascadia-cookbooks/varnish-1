#! /bin/sh
# Chef generated file. Edits will be lost.
#
# varnish Control the varnish HTTP accelerator
#
# chkconfig: - 90 10
# description: Varnish is a high-perfomance HTTP accelerator
# processname: varnishd
# config: /etc/sysconfig/varnish
# pidfile: /var/run/varnish/varnishd.pid

### BEGIN INIT INFO
# Provides: varnish
# Required-Start: $network $local_fs $remote_fs
# Required-Stop: $network $local_fs $remote_fs
# Default-Start:
# Default-Stop:
# Should-Start: $syslog
# Short-Description: start and stop varnishd
# Description: Varnish is a high-perfomance HTTP accelerator
### END INIT INFO

retval=0
pidfile=/var/run/varnish.pid

exec="<%= node['varnish']['binary_path'] %>"

# TODO: fix $reload_exec
#reload_exec="/usr/sbin/varnish_reload_vcl"

prog="varnishd"
lockfile="/var/lock/varnish"

. "/etc/varnish/varnish.params"

start() {
        echo -n "Starting varnish HTTP accelerator: "

        # Varnish always gives output on STDOUT
        $exec -P $pidfile \
            -f $VARNISH_VCL_CONF \
            -a ${VARNISH_LISTEN_ADDRESS}:${VARNISH_LISTEN_PORT} \
            -T ${VARNISH_ADMIN_LISTEN_ADDRESS}:${VARNISH_ADMIN_LISTEN_PORT} \
            -t $VARNISH_TTL \
            -S $VARNISH_SECRET_FILE \
            -s $VARNISH_STORAGE \
            $DAEMON_OPTS > /dev/null 2>&1

        retval=$?
        if [ $retval -eq 0 ]
        then
                touch $lockfile
                echo success
                echo
        else
                echo failure
                echo
        fi
        return $retval
}

stop() {
        echo -n "Stopping varnish HTTP accelerator: "
        killall $prog
        retval=$?
        echo
        [ $retval -eq 0 ] && rm -f $lockfile
        return $retval
}

restart() {
        stop && sleep 2
        start
}

reload() {
        # TODO: fix $reload_exec
        #if [ "$RELOAD_VCL" = "1" ]
        #then
        #        $reload_exec
        #else
                force_reload
        #fi
}

force_reload() {
        restart
}

rh_status() {
        test -f $pidfile && pgrep $prog
}

rh_status_q() {
        rh_status >/dev/null 2>&1
}

case "$1" in
        start)
                rh_status_q && exit 0
                $1
                ;;
        stop)
                rh_status_q || exit 0
                $1
                ;;
        restart)
                $1
                ;;
        reload)
                $1
                ;;
        force-reload)
                force_reload
                ;;
        status)
                rh_status
                ;;
        condrestart|try-restart)
                rh_status_q || exit 0
                restart
                ;;
        *)
        echo "Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"

        exit 2
esac

exit $?
